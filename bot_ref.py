from config import TG_TOKEN
import sqlite3
import json
from parsers import Funcs, sites
import asyncio
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import text
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
#cursor.execute("DROP TABLE IF EXISTS users")
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    olympiads TEXT
)""")

conn.commit()
cursor.close()
conn.close()

API_TOKEN = TG_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


async def send_info():
    while True:
        now = datetime.now().time()
        if now.minute % 5 == 0:
            print("send")
            conn = sqlite3.connect("users.db")
            cursor = conn.cursor()
            for i in range(len(Funcs)):
                print(sites[i])
                for news in Funcs[i]():
                    print(news)
                    for user in cursor.execute("SELECT user_id, olympiads FROM users").fetchall():
                        olympiads = json.loads(user[1])
                        user_id = user[0]
                        if sites[i] in olympiads:
                            await bot.send_message(chat_id=user_id, text=news)
            await asyncio.sleep(60)
        else:
            await asyncio.sleep(30)


def make_keyboard():
    buttons = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å  –æ–ª–∏–º–ø–∏–∞–¥—É")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥")],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)




@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = make_keyboard()
    await message.answer("""–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–æ–≥–¥–∞ –∏ –≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞. üèÜ
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:
‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ç–µ–±—è –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö.
‚úÖ –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å—Ä–æ–∫–æ–≤.
‚úÖ –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
""", reply_markup=keyboard)

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        """‚ú® *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É "–û–ª–∏–º–ø–∏–∞–¥—ã"* ‚ú®

–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –æ–ª–∏–º–ø–∏–∞–¥ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç—è–∑–∞–Ω–∏–π. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:

1. *–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É*: –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –æ–ª–∏–º–ø–∏–∞–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏—Ö.
2. *–£–¥–∞–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É*: –ï—Å–ª–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ –æ–ª–∏–º–ø–∏–∞–¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.
3. *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥*: –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
4. *–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥*: –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–ª–∏–º–ø–∏–∞–¥–∞–º.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.
""",
        parse_mode="Markdown"
    )



def generate_add_message(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    builder = InlineKeyboardBuilder()
    f = False
    for i in range(len(sites)):
        olympiads = cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (user_id,)).fetchall()
        if olympiads == [] or sites[i] not in json.loads(olympiads[0][0]):
            f = True
            builder.add(InlineKeyboardButton(text=sites[i],
                                             callback_data=f"add||{sites[i]}||{user_id}"))
            print(sites[i])
        builder.adjust(2)
    cursor.close()
    conn.close()
    if not f:
        return ("–í—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",)
    else:
        return ("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É:", builder.as_markup())

def generate_delete_message(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    builder = InlineKeyboardBuilder()
    olympiads = cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (user_id,)).fetchall()
    if olympiads:
        olympiads = json.loads(olympiads[0][0])
    if olympiads == []:
        return ("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥",)
    else:
        for i in range(len(olympiads)):
            builder.add(InlineKeyboardButton(text=olympiads[i],
                                             callback_data=f"delete||{olympiads[i]}||{user_id}"))
        builder.adjust(2)
        return ("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É:", builder.as_markup())


@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
async def add_olympiad(message: types.Message):
    args = generate_add_message(message.from_user.id)
    if len(args) == 2:
        await message.answer(args[0], reply_markup=args[1])
    else:
        await message.answer(args[0])


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å  –æ–ª–∏–º–ø–∏–∞–¥—É")
async def delete_olympiad(message: types.Message):
    args = generate_delete_message(message.from_user.id)
    if len(args) == 2:
        await message.answer(args[0], reply_markup=args[1])
    else:
        await message.answer(args[0])

@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥")
async def show_olympiads(message: types.Message):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    olympiads = cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (message.from_user.id,)).fetchall()
    if olympiads:
        olympiads = json.loads(olympiads[0][0])
    if olympiads == []:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
    else:
        s = ""
        for i in range(len(olympiads)):
            s += f"{i + 1}. {olympiads[i]}\n"
        await message.answer(f"""–í–∞—à–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã:\n{s}""")
    cursor.close()
    conn.close()

@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥")
async def get_news(message: types.Message):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    conn2 = sqlite3.connect("news.db")
    cursor2 = conn2.cursor()
    user_id = message.from_user.id
    olympiads = json.loads(cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0])
    for olympiad in olympiads:
        news = json.loads(cursor2.execute("SELECT news FROM news WHERE title = ?", (olympiad,)).fetchall()[0][0])[-1]
        await message.answer(f"–ù–æ–≤–æ—Å—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã {olympiad}:\n{news}")
    cursor.close()
    conn.close()

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    type_action, site, user_id = callback.data.split("||")
    if type_action == "add":
        user_id = int(user_id)
        if user_id not in list(map(lambda x: x[0], cursor.execute("SELECT user_id FROM users").fetchall())):
            cursor.execute("INSERT INTO users (user_id, olympiads) VALUES (?, ?)", (user_id, json.dumps([])))
            conn.commit()
        olympiads = json.loads(cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0])
        if site not in olympiads:
            olympiads.append(site)
            cursor.execute("UPDATE users SET olympiads = ? WHERE user_id = ?", (json.dumps(olympiads), user_id))
            conn.commit()
            await callback.message.answer(f"–û–ª–∏–º–ø–∏–∞–¥–∞ {site} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            args = generate_add_message(user_id)
            if len(args) == 2:
                await callback.message.edit_text(args[0], reply_markup=args[1])
            else:
                await callback.message.edit_text(args[0])
    elif type_action == "delete":
        user_id = int(user_id)
        olympiads = json.loads(cursor.execute("SELECT olympiads FROM users WHERE user_id = ?", (user_id,)).fetchall()[0][0])
        if site in olympiads:
            olympiads.remove(site)
            cursor.execute("UPDATE users SET olympiads = ? WHERE user_id = ?", (json.dumps(olympiads), user_id))
            conn.commit()
            await callback.message.answer(f"–û–ª–∏–º–ø–∏–∞–¥–∞ {site} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            args = generate_delete_message(user_id)
            if len(args) == 2:
                await callback.message.edit_text(args[0], reply_markup=args[1])
            else:
                await callback.message.edit_text(args[0])
    conn.commit()
    cursor.close()
    conn.close()
    await callback.answer()


async def main():
    asyncio.create_task(send_info())

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
